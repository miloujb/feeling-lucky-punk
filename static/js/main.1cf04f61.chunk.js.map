{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["GetDrink","useState","name","setName","image_url","setImgURL","description","setDescription","abv","setABV","pairing","setPairings","tips","setTips","tagline","setTagline","useEffect","fetch","then","results","json","data","food_pairing","map","className","brewers_tips","src","alt","type","value","onClick","window","location","reload","ReactDOM","render","document","getElementById","Boolean","hostname","match","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+OAKA,SAASA,IACP,MAAwBC,qBAAU,mBAA3BC,EAAI,KAAEC,EAAO,KACpB,EAA+BF,qBAAU,mBAAlCG,EAAS,KAAEC,EAAS,KAC3B,EAAsCJ,qBAAU,mBAAzCK,EAAW,KAAEC,EAAc,KAClC,EAAsBN,qBAAU,mBAAzBO,EAAG,KAAEC,EAAM,KAClB,EAA+BR,qBAAU,mBAAlCS,EAAO,KAAEC,EAAW,KAC3B,EAAwBV,qBAAU,mBAA3BW,EAAI,KAAEC,EAAO,KACpB,EAA8BZ,qBAAU,mBAAjCa,EAAO,KAAEC,EAAU,KA2B1B,OArBAC,qBAAU,WACRC,MAAM,2CAA2CC,MAAK,SAACC,GAAO,OAC5DA,EAAQC,OAAOF,MAAK,SAACG,GACnBlB,EAAQkB,EAAK,GAAGnB,MAChBK,EAAec,EAAK,GAAGf,aACvBD,EAAUgB,EAAK,GAAGjB,WAClBO,EACEU,EAAK,GAAGC,aAAaC,KAAI,SAACb,GACxB,OACE,wBAAIc,UAAU,QACZ,wBAAIA,UAAU,QAAQd,QAK9BD,EAAOY,EAAK,GAAGb,KACfK,EAAQQ,EAAK,GAAGI,cAChBV,EAAWM,EAAK,GAAGP,iBAGtB,IAED,yBAAKU,UAAU,cACb,wBAAIA,UAAU,SAAQ,wBACtB,wBAAIA,UAAU,QACXtB,EAAK,KAAGM,EAAI,MAEf,wBAAIgB,UAAU,WAAWV,GACzB,yBAAKU,UAAU,mBACb,yBAAKA,UAAU,QAAQE,IAAKtB,EAAWuB,IAAKzB,KAE9C,yBAAKsB,UAAU,kBACb,wBAAIA,UAAU,QAAQlB,GACtB,uBAAGkB,UAAU,WAAU,qBAAmBZ,EAAK,KAC/C,uBAAGY,UAAU,WAAU,4BAA0Bd,GACjD,yBAAKc,UAAU,UACb,2BAAOI,KAAK,SAASC,MAAM,UAAUC,QAxC7C,WACEC,OAAOC,SAASC,QAAO,QA0CtB,yBAAKT,UAAU,UAClB,2BAAG,aAAU,kBAAC,IAAO,MAAG,gCAM1BU,IAASC,OAAO,kBAACnC,EAAQ,MAAKoC,SAASC,eAAe,SAEvCrC,QCtDKsC,QACW,cAA7BP,OAAOC,SAASO,UAEe,UAA7BR,OAAOC,SAASO,UAEhBR,OAAOC,SAASO,SAASC,MACvB,2DCZNN,IAASC,OAAO,kBAAC,EAAG,MAAKC,SAASC,eAAe,SD6H3C,kBAAmBI,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1cf04f61.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {FaHeart} from 'react-icons/fa'\nimport \"../src/App.css\";\n\nfunction GetDrink() {\n  const [name, setName] = useState();\n  const [image_url, setImgURL] = useState();\n  const [description, setDescription] = useState();\n  const [abv, setABV] = useState();\n  const [pairing, setPairings] = useState();\n  const [tips, setTips] = useState();\n  const [tagline, setTagline] = useState();\n\n  function reloadPage() {\n    window.location.reload(false);\n  }\n\n  useEffect(() => {\n    fetch(\"https://api.punkapi.com/v2/beers/random\").then((results) =>\n      results.json().then((data) => {\n        setName(data[0].name);\n        setDescription(data[0].description);\n        setImgURL(data[0].image_url);\n        setPairings(\n          data[0].food_pairing.map((pairing) => {\n            return (\n              <ul className=\"list\">\n                <li className=\"pair\">{pairing}</li>\n              </ul>\n            );\n          })\n        );\n        setABV(data[0].abv);\n        setTips(data[0].brewers_tips);\n        setTagline(data[0].tagline);\n      })\n    );\n  }, []);\n  return (\n    <div className=\"background\">\n      <h1 className=\"title\">Feeling Lucky, Punk?</h1>\n      <h2 className=\"name\">\n        {name} ({abv}%)\n      </h2>\n      <h3 className=\"tagline\">{tagline}</h3>\n      <div className=\"image-container\">\n        <img className=\"image\" src={image_url} alt={name} />\n      </div>\n      <div className=\"text-container\">\n        <h4 className=\"desc\">{description}</h4>\n        <p className=\"brewers\">Our brewers say: \"{tips}\"</p>\n        <p className=\"pairing\">This beer goes well with:{pairing}</p>\n        <div className=\"button\">\n          <input type=\"button\" value=\"Refresh\" onClick={reloadPage} />\n        </div>\n      </div>\n     <div className=\"footer\">\n  <p>Made with <FaHeart /> by Emily Bailey, May 2020</p>\n     </div>\n    </div>\n  );\n}\n\nReactDOM.render(<GetDrink />, document.getElementById(\"root\"));\n\nexport default GetDrink;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}